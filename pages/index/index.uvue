<script lang="uts" setup>
	import { computed, reactive } from "vue";
	// #ifdef WEB
	import { PointerwheelEvent } from "@/uni_modules/u-pointer/index.uts";
	// #endif
	import {
		PointerId,
		Pointer,
		PointerclickEvent,
		PointerdownEvent,
		PointermoveEvent,
		PointerupEvent,
		globalPointer,
		MapUtils,
	} from "@/uni_modules/u-pointer/index.uts";

	type PointerMap = {
		local : Map<PointerId, Pointer>;
		global : Map<PointerId, Pointer>;
	}

	const pointerMap = reactive<PointerMap>({
		local: new Map<PointerId, Pointer>(),
		global: new Map<PointerId, Pointer>(),
	});


	const localPointers = computed(() => MapUtils.getValues<PointerId, Pointer>(pointerMap.local));
	const globalPointers = computed(() => MapUtils.getValues<PointerId, Pointer>(pointerMap.global));

	function pointerdown(e : PointerdownEvent) {
		console.log("pointerdown");
		pointerMap.local.set(e.pointer.id, e.pointer);
	}

	function pointermove(e : PointermoveEvent) {
		console.log("pointermove", e.pointer.id);
		pointerMap.local.set(e.pointer.id, e.pointer);
	}

	function pointerup(e : PointerupEvent) {
		console.log("pointerup", e.pointer.id);
		pointerMap.local.delete(e.pointer.id);
	}

	function pointerclick(e : PointerclickEvent) {
		console.log("pointerclick", e.pointer.id);
	}

	// #ifdef WEB
	function pointerwheel(e : PointerwheelEvent) {
		console.log("pointerwheel", e.pointer.id, e.direction);
	}
	// #endif


	globalPointer.addEventListener<PointerdownEvent>("onpointerdown", e => {
		console.log("root pointerdown", e.pointer.id);
		pointerMap.global.set(e.pointer.id, e.pointer);
	});

	globalPointer.addEventListener<PointermoveEvent>("onpointermove", e => {
		console.log("root onpointermove", e.pointer.id);
		pointerMap.global.set(e.pointer.id, e.pointer);
	});

	globalPointer.addEventListener<PointerupEvent>("onpointerup", e => {
		console.log("root pointerup", e.pointer.id);
		pointerMap.global.delete(e.pointer.id);
	});

	globalPointer.addEventListener<PointerclickEvent>("onpointerclick", e => {
		console.log("root pointerclick", e.pointer.id);
	});

	// #ifdef WEB
	globalPointer.addEventListener<PointerwheelEvent>("onpointerwheel", (e) => {
		console.log("root pointerwheel", e.pointer.id, e.direction);
	});
	// #endif

	function normalizeNumber(value : number) : string {
		return value.toFixed(2);
	}
</script>

<template>
	<view class="w-100 h-100">
		<u-pointer-root>
			<view>
				<!-- #ifdef WEB -->
				<u-pointer class="rect" @onpointerclick="pointerclick" @onpointerdown="pointerdown" @onpointermove="pointermove"
					@onpointerup="pointerup" @onpointerwheel="pointerwheel" />
				<!-- #endif -->

				<!-- #ifndef WEB -->
				<u-pointer class="rect" @onpointerclick="pointerclick" @onpointerdown="pointerdown" @onpointermove="pointermove"
					@onpointerup="pointerup" />
				<!-- #endif -->

				<view class="info" age="18">
					<text class="title">矩形指针信息 {{ localPointers.length }}</text>
					<view v-for="pointer in localPointers" :key="pointer.id">
						<text>id: {{ pointer.id }}</text>
						<text>x: {{ normalizeNumber(pointer.x) }}, y: {{ normalizeNumber(pointer.y) }}</text>
						<text>screenX: {{ normalizeNumber(pointer.screenX) }}, screenY:
							{{ normalizeNumber(pointer.screenY) }}</text>
						<text>pageX: {{ normalizeNumber(pointer.pageX) }}, pageY: {{ normalizeNumber(pointer.pageY) }}</text>
					</view>
				</view>

				<view class="divider"></view>

				<view class="info">
					<text class="title">全局指针信息 {{ globalPointers.length }}</text>
					<view v-for="pointer in globalPointers" :key="pointer.id">
						<text>id: {{ pointer.id }}</text>
						<text>x: {{ normalizeNumber(pointer.x) }}, y: {{ normalizeNumber(pointer.y) }}</text>
						<text>screenX: {{ normalizeNumber(pointer.screenX) }}, screenY:
							{{ normalizeNumber(pointer.screenY) }}</text>
						<text>pageX: {{ normalizeNumber(pointer.pageX) }}, pageY: {{ normalizeNumber(pointer.pageY) }}</text>
					</view>
				</view>
			</view>
		</u-pointer-root>
	</view>
</template>

<style>
	.w-100 {
		width: 100%;
	}

	.h-100 {
		height: 100%;
	}

	.title {
		font-weight: bold;
	}

	.rect {
		left: 100px;
		top: 0px;
		width: 100px;
		height: 100px;
		background-color: red;
	}
</style>