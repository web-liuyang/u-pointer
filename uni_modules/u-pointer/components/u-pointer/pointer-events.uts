export type PointerId = number;

export class Pointer {
	constructor(
		/** 触摸点的标识符。这个值在这根手指所引发的所有事件中保持一致，直到手指抬起。 */
		public readonly id : PointerId,
		/** 相对于页面可显示区域左边的距离 */
		public readonly x : number,
		/** 相对于页面可显示区域顶部的距离 */
		public readonly y : number,
		/** 相对于屏幕左边的距离，包括滚动距离 */
		public readonly pageX : number,
		/** 相对于屏幕顶部的距离，包括滚动距离 */
		public readonly pageY : number,
		/** 相对于屏幕左边的距离，不包括滚动距离 */
		public readonly screenX : number,
		/** 相对于屏幕顶部的距离，不包括滚动距离 */
		public readonly screenY : number,
		/** 触发指针目标 */
		public readonly target : PointerTarget
	) { }
}

/** 偏移量 */
export class Delta {
	constructor(
		/** x 方向偏移量 */
		public readonly x : number,
		/** y 方向偏移量 */
		public readonly y : number,
	) { }
}

export class MovePointer extends Pointer {

	static createByPointer(pointer : Pointer, delta : Delta) {
		return new MovePointer(
			pointer.id,
			pointer.x,
			pointer.y,
			pointer.pageX,
			pointer.pageY,
			pointer.screenX,
			pointer.screenY,
			pointer.target,
			delta,
		);
	}

	constructor(
		/** 触摸点的标识符。这个值在这根手指所引发的所有事件中保持一致，直到手指抬起。 */
		id : PointerId,
		/** 相对于页面可显示区域左边的距离 */
		x : number,
		/** 相对于页面可显示区域顶部的距离 */
		y : number,
		/** 相对于屏幕左边的距离，包括滚动距离 */
		pageX : number,
		/** 相对于屏幕顶部的距离，包括滚动距离 */
		pageY : number,
		/** 相对于屏幕左边的距离，不包括滚动距离 */
		screenX : number,
		/** 相对于屏幕顶部的距离，不包括滚动距离 */
		screenY : number,
		/** 触发指针目标 */
		target : PointerTarget,
		public readonly delta : Delta,
	) {
		super(id, x, y, pageX, pageY, screenX, screenY, target);
	}
}

/** 基础指针事件 */
export class BasePointerEvent {
	/** 事件创建的时间（以毫秒为单位）。 */
	public readonly timestamp : number;
	/** 指针 */
	public readonly pointer : Pointer;
	/** 原生事件 */
	public readonly nativeEvent : NativeEvent;

	constructor(pointer : Pointer, nativeEvent : NativeEvent) {
		this.timestamp = Date.now();
		this.pointer = pointer;
		this.nativeEvent = nativeEvent;
	}
}

/** 点击事件 */
export class PointerclickEvent extends BasePointerEvent {
	constructor(pointer : Pointer, nativeEvent : NativeEvent) {
		super(pointer, nativeEvent);
	}
}

/** 按下事件 */
export class PointerdownEvent extends BasePointerEvent {
	constructor(pointer : Pointer, nativeEvent : NativeEvent) {
		super(pointer, nativeEvent);
	}
}

/** 移动事件 */
export class PointermoveEvent extends BasePointerEvent {
	public override pointer : MovePointer;

	constructor(pointer : MovePointer, nativeEvent : NativeEvent) {
		super(pointer as Pointer, nativeEvent);
		this.pointer = pointer;
	}
}

/** 抬起事件 */
export class PointerupEvent extends BasePointerEvent {
	constructor(pointer : Pointer, nativeEvent : NativeEvent) {
		super(pointer, nativeEvent);
	}
}

/** 取消事件 */
export class PointercancelEvent extends BasePointerEvent {
	constructor(pointer : Pointer, nativeEvent : NativeEvent) {
		super(pointer, nativeEvent);
	}
}

// #ifdef WEB

import { PointerTarget, NativeEvent, EventType } from "./pointer-events-web.uts";

export enum WheelDirection {
	up,
	down,
	left,
	right,
}

/** 滚动事件 */
export class PointerwheelEvent extends BasePointerEvent {
	public readonly direction : WheelDirection;

	constructor(pointer : Pointer, nativeEvent : WheelEvent) {
		super(pointer, nativeEvent);

		const deltaX = nativeEvent.deltaX;
		const deltaY = nativeEvent.deltaY;

		if (deltaY === 0) {
			this.direction = deltaX < 0 ? WheelDirection.left : WheelDirection.right;
		} else {
			this.direction = deltaY < 0 ? WheelDirection.up : WheelDirection.down;
		}
	}
}

// #endif

// #ifndef WEB

import { PointerTarget, NativeEvent, EventType } from "./pointer-events-common.uts";

// #endif

export { PointerTarget, NativeEvent, EventType }