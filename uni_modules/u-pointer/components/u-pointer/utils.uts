import { Pointer } from "./pointer-events";

export function getPointersByTouch(e : UniTouchEvent) : Pointer[] {
	const touches = Array.from<UniTouch>(e.touches);
	const pointers : Array<Pointer> = touches.map(t => {
		if (e.target == null) {
			// 目前还没有出现过target不存在的情况, 出现此情况再来看如何处理
			throw new Error("no target");
		}

		return new Pointer(
			t.identifier,
			t.clientX,
			t.clientY,
			t.pageX,
			t.pageY,
			t.screenX,
			t.screenY,
			e.target!,
		)

		// return {
		// 	id: t.identifier,
		// 	x: t.clientX,
		// 	y: t.clientY,
		// 	pageX: t.pageX,
		// 	pageY: t.pageY,
		// 	screenX: t.screenX,
		// 	screenY: t.screenY,
		// 	target: e.target,
		// } as UTSJSONObject;
	});

	return pointers;
}

export function getPointersByMouse(e : MouseEvent) : Pointer[] {
	if (e.target == null) {
		// 目前还没有出现过target不存在的情况, 出现此情况再来看如何处理
		throw new Error("no target");
	}

	const pointers : Pointer[] = [
		new Pointer(0,
			e.x,
			e.y,
			e.pageX,
			e.pageY,
			e.screenX,
			e.screenY,
			e.target!,
		)
		// {
		// 	id: 0,
		// 	x: e.x,
		// 	y: e.y,
		// 	pageX: e.pageX,
		// 	pageY: e.pageY,
		// 	screenX: e.screenX,
		// 	screenY: e.screenY,
		// 	target: e.target,
		// },
	];

	return pointers;
}

// #ifndef APP-ANDROID
export function getPointersByWheel(e : WheelEvent) : Pointer[] {
	if (e.target == null) {
		// 目前还没有出现过target不存在的情况, 出现此情况再来看如何处理
		throw new Error("no target");
	}

	const pointers : Pointer[] = [
		new Pointer(0,
			e.x,
			e.y,
			e.pageX,
			e.pageY,
			e.screenX,
			e.screenY,
			e.target!,
		)
	];

	return pointers;
}
// #endif