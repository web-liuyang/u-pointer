import { EventTypeMap, EventType, BasePointerEvent } from "./pointer-events.uts";

/** 事件监听器 */
export class GlobalPointer {
	private _listeners = new Map<keyof EventTypeMap, Array<((e: BasePointerEvent) => void)>>();

	/**
	 * 添加事件监听器
	 * @param type 事件类型
	 * @param listener 回调函数
	 */
	public addEventListener(type: EventType, listener: (e: BasePointerEvent) => void) {
		if (!this._listeners.has(type)) this._listeners.set(type, []);
		this._listeners.get(type)!.push(listener);
	}

	/**
	 * 移除事件监听器
	 * @param type 事件类型
	 * @param listener 回调函数
	 */
	public removeEventListener(type: EventType, listener: (e: BasePointerEvent) => void) {
		if (!this._listeners.has(type)) return;
		const index = this._listeners.get(type)?.findIndex(cb => cb === listener) ?? -1;
		if (index < 0) return;
		this._listeners.get(type)!.splice(index, 1);
	}

	/**
	 * 通知事件
	 * @param type 事件类型
	 * @param event 事件对象
	 */
	public notify(type: EventType, event: BasePointerEvent) {
		if (!this._listeners.has(type)) return;
		
		this._listeners.get(type)?.forEach((listener) => {
			listener(event);
		})
	}
}

/** 全局事件监听器 */
export const globalPointer = new GlobalPointer();
